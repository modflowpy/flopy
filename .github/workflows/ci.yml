name: flopy continuous integration

on:
  schedule:
    - cron: '0 8 * * *' # run at 8 AM UTC (12 am PST)
  push:
    branches:
      - master
      - develop
      - 'release*'
      - 'ci-pytest'
  pull_request:
    branches: [master, develop]

jobs:

  flopy_setup:
    name: standard installation
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    defaults:
      run:
        shell: bash

    steps:

    # check out repo
    - name: Checkout flopy repo
      uses: actions/checkout@v2.3.4

    - name: Setup Python 3.9
      uses: actions/setup-python@v2.2.2
      with:
        python-version: 3.9

    - name: Upgrade pip
      run: |
        python -m pip install --upgrade pip

    - name: Base flopy installation
      run: |
        pip install . --use-feature=in-tree-build

    - name: Print flopy version
      run: |
        python -c "import flopy; print(flopy.__version__)"


  flopy_lint:
    name: linting
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    defaults:
      run:
        shell: bash

    if: github.event_name != 'schedule'
    steps:
    # check out repo
    - name: Checkout flopy repo
      uses: actions/checkout@v2.3.4

    # Standard python fails on windows without GDAL installation. Using
    # standard python here since only linting on linux.
    # Use standard bash shell with standard python
    - name: Setup Python 3.8
      uses: actions/setup-python@v2.2.2
      with:
        python-version: 3.9

    - name: Print python version
      run: |
        python --version

    - name: Install Python 3.9 packages
      run: |
        python -m pip install --upgrade pip
        pip install -r etc/requirements.pip.txt

    - name: Run black
      run: |
        echo "if black check fails run"
        echo "  black ./flopy"
        echo "and then commit the changes."
        black --check ./flopy

    - name: Run flake8
      run: |
        flake8 --count --show-source --exit-zero ./flopy

    - name: Run pylint
      run: |
        pylint --jobs=2 --errors-only --exit-zero ./flopy

  flopyCI:
    name: autotests
    needs: [flopy_setup, flopy_lint]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.9, 3.8, 3.7]
        run-type: [std]
        test-pth: [""]
        include:
          - os: ubuntu-latest
            python-version: 3.9
            run-type: nb
            test-path: run_notebooks.py
          - os: ubuntu-latest
            python-version: 3.9
            run-type: script
            test-path: run_scripts.py
    defaults:
      run:
        shell: bash -l {0}

    steps:
    # check out repo
    - name: Checkout flopy repo
      uses:  actions/checkout@v2.3.4

    - name: Get branch name
      uses: nelonoel/branch-name@v1.0.1

    - name: Cache Miniconda
      uses: actions/cache@v2.1.0
      env:
        # Increase this value to reset cache if environment.yml has changed
        CACHE_NUMBER: 1
      with:
        path: ~/conda_pkgs_dir
        key: ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.run-type }}-${{ env.CACHE_NUMBER }}-${{ hashFiles('etc/environment.yml') }}

    # Standard python fails on windows without GDAL installation
    # Using custom bash shell ("shell: bash -l {0}") with Miniconda
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v2.1.1
      with:
        python-version: ${{ matrix.python-version }}
        mamba-version: "*"
        channels: conda-forge
        auto-update-conda: true
        activate-environment: flopy
        use-only-tar-bz2: true

    - name: Add jupyter and jupytext to notebooks run
      if: matrix.run-type == 'nb'
      run: |
        mamba install --name flopy jupyter jupytext

    - name: Add packages to flopy environment using mamba or conda
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          conda env update --name flopy --file etc/environment.yml
        else
          mamba env update --name flopy --file etc/environment.yml
        fi

    - name: Install pymake, xmipy, and flopy
      run: |
        pip install https://github.com/modflowpy/pymake/zipball/master
        pip install xmipy
        pip install . --use-feature=in-tree-build

    - name: Prepare for the autotests
      working-directory: ./autotest
      run: |
        pytest -v ci_prepare.py

    - name: Add executables directory to path
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Run pytest on autotest scripts on Linux and MacOS
      if: matrix.run-type == 'std' && runner.os != 'Windows'
      working-directory: ./autotest
      run: |
        pytest -v -n auto --durations=0 --cov=flopy --cov-report=xml

    - name: Run pytest on autotest scripts on Windows
      if: matrix.run-type == 'std' && runner.os == 'Windows'
      working-directory: ./autotest
      run: |
        pytest -v -n auto --durations=0 --cov=flopy --cov-report=xml

    - name: Run pytest on scripts and notebooks
      if: matrix.run-type != 'std'
      working-directory: ./autotest
      run: |
        pytest -v -n auto --durations=0 --cov=flopy --cov-report=xml ${{ matrix.test-path }}

    - name: Print coverage report before upload
      working-directory: ./autotest
      run: |
        coverage report

    - name: Upload coverage to Codecov
      if:
        github.repository_owner == 'modflowpy' && github.event_name == 'push'
      uses: codecov/codecov-action@v2.1.0
      with:
        directory: ./autotest
        file: coverage.xml
