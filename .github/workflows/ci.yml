name: flopy continuous integration

on:
  schedule:
    - cron: '0 8 * * *' # run at 8 AM UTC (12 am PST)
  push:
    branches: [master, develop]
  pull_request:
    branches: [develop]

jobs:

  flopy_lint:
    name: linting
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:

    # check out repo
    - name: Checkout flopy repo
      uses: actions/checkout@v2

    # Standard python fails on windows without GDAL installation. Using
    # standard python here since only linting on linux.
    # Use standard bash shell with standard python
    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Print python version
      shell: bash
      run: |
        python --version

    - name: Install Python 3.8 packages
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r etc/requirements.pip.txt

    - name: Run black
      shell: bash
      run: |
        echo "if black check fails run"
        echo "  black --line-length 79 ./flopy"
        echo "and then commit the changes."
        black --check --line-length 79 ./flopy

    - name: Run flake8
      shell: bash
      run: |
        flake8 --count --show-source --exit-zero ./flopy

    - name: Run pylint
      shell: bash
      run: |
        pylint --jobs=2 --errors-only --exit-zero ./flopy

  flopyCI:
    name: autotests
    needs: flopy_lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.8, 3.7, 3.6]
        run-type: [std]
        test-pth: [""]
        include:
          - os: ubuntu-latest
            python-version: 3.8
            run-type: nb
            test-path: autotest_notebooks.py
          - os: ubuntu-latest
            python-version: 3.8
            run-type: script
            test-path: autotest_scripts.py

    steps:
    # check out repo
    - name: Checkout flopy repo
      uses: actions/checkout@v2

    - name: Cache Miniconda
      uses: actions/cache@v2.1.0
      env:
        # Increase this value to reset cache if environment.yml has changed
        CACHE_NUMBER: 0
      with:
        path: ~/conda_pkgs_dir
        key: ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.run-type }}-${{ env.CACHE_NUMBER }}-${{ hashFiles('etc/environment.yml') }}

    # Standard python fails on windows without GDAL installation
    # Using custom bash shell ("shell: bash -l {0}") with Miniconda
    - name: Setup Miniconda
      uses: goanpeca/setup-miniconda@v1.6.0
      with:
        python-version: ${{ matrix.python-version }}
        auto-update-conda: true
        auto-activate-base: true
        activate-environment: flopy
        use-only-tar-bz2: true

    - name: Add jupyter and nbconvert to notebooks run
      if: matrix.run-type == 'nb'
      shell: bash -l {0}
      run: |
        conda install -n flopy -c conda-forge jupyter nbconvert

    - name: Add jupyter and jupytext to scripts run
      if: matrix.run-type == 'script'
      shell: bash -l {0}
      run: |
        conda install -n flopy -c conda-forge jupyter jupytext

    - name: Add packages to flopy environment
      shell: bash -l {0}
      run: |
        conda env update --name flopy --file etc/environment.yml

    - name: Determine python environment
      shell: bash -l {0}
      run: |
        conda info
        conda list

    - name: Install pymake, xmipy, and flopy
      shell: bash -l {0}
      run: |
        pip install https://github.com/modflowpy/pymake/zipball/master
        pip install xmipy
        pip install .

    - name: Download executables needed for tests
      shell: bash -l {0}
      run: |
        python ./autotest/get_exes.py

    - name: Add executables directory to path
      shell: bash
      run: |
        echo "::add-path::$HOME/.local/bin"

    - name: Run nosetests
      shell: bash -l {0}
      run: |
        coverage run -m nose -v --with-id --with-timer \
        --with-coverage --cover-package=flopy --cover-xml \
        --cover-xml-file=../coverage.xml -w ./autotest ${{ matrix.test-path }}

    - name: List files in the root directory
      shell: bash
      run: |
        ls -l

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1.0.12
      with:
        file: ./coverage.xml

    - name: Run jupytext on tutorials
      if: matrix.run-type == 'script'
      shell: bash -l {0}
      run: |
        cd .docs/
        python tutorials2ipynb.py
        cd ../

    - name: Upload completed jupyter notebooks as an artifact for ReadtheDocs
      if: matrix.run-type == 'script' && github.repository_owner == 'modflowpy'
      uses: actions/upload-artifact@v2
      with:
        name: notebooks-for-${{ github.sha }}
        path: |
          .docs/_notebooks

  # trigger rtd if previous job was successful
  rtd:
    name: ReadtheDocs
    needs: flopyCI
    runs-on: ubuntu-latest

    if: github.repository_owner == 'modflowpy'
    steps:
      - name: Checkout flopy repo
        uses: actions/checkout@v2

      - name: Output repo information
        run: |
          echo ${{ github.repository_owner }}
          echo ${{ github.repository }}
          echo ${{ github.ref }}

      - name: Trigger RTDs build on master and develop branches
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
        uses: dfm/rtds-action@v1.0.0
        with:
          webhook_url: ${{ secrets.RTDS_WEBHOOK_URL }}
          webhook_token: ${{ secrets.RTDS_WEBHOOK_TOKEN }}
          commit_ref: ${{ github.ref }}
