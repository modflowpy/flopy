name: FloPy example script & notebook tests

on:
  push:
  schedule:
    - cron: '0 8 * * *' # run at 8 AM UTC (12 am PST)

jobs:
  examples:
    name: Example scripts & notebooks
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ 3.9, "3.10", "3.11", "3.12" ]
    defaults:
      run:
        shell: bash -l {0}
    timeout-minutes: 90
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.18"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: pyproject.toml

      - name: Install FloPy
        run: uv sync --all-extras

      - name: OpenGL workaround on Linux
        if: runner.os == 'Linux'
        run: |
          # referenced from https://github.com/pyvista/pyvista/blob/main/.github/workflows/vtk-pre-test.yml#L53
          uv pip uninstall -y vtk
          uv pip install --extra-index-url https://wheels.vtk.org trame vtk-osmesa
      
      - name: Install OpenGL on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $PSDefaultParameterValues['*:ErrorAction']='Stop'
          powershell .github/install_opengl.ps1

      - name: Install Modflow-related executables
        uses: modflowpy/install-modflow-action@v1

      - name: Install Modflow dev build executables
        uses: modflowpy/install-modflow-action@v1
        with:
          repo: modflow6-nightly-build

      - name: Install triangle (macOS workaround)
        if: runner.os == 'macOS'
        uses: modflowpy/install-modflow-action@v1
        with:
          repo: executables
          ostag: mac
          subset: triangle

      - name: Update FloPy packages
        run: uv run python -m flopy.mf6.utils.generate_classes --ref develop --no-backup

      - name: Run example tests
        working-directory: autotest
        run: uv run pytest -v -m="example" -n=auto -s --durations=0 --keep-failed=.failed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload failed test outputs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: failed-example-${{ matrix.os }}-${{ matrix.python-version }}
          path: autotest/.failed/**
