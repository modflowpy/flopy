name: FloPy documentation

on:
  push:
    branches:
      - master
      - develop
      - release*
      - ci-diagnose*
      - notebooks*
  pull_request:
    branches:
      - master
      - develop

jobs:

  rtd_build:
    name: Prepare and test notebooks
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout flopy repo
        uses: actions/checkout@v3

      - name: Output repo information
        run: |
          echo $GITHUB_REPOSITORY_OWNER
          echo $GITHUB_REPOSITORY
          echo $GITHUB_REF
          echo $GITHUB_EVENT_NAME

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
          cache: 'pip'
          cache-dependency-path: pyproject.toml

      - name: Upgrade pip
        run: pip install --upgrade pip

      - name: Install flopy and dependencies
        run: pip install ".[test, doc, optional]"
      
      - name: Workaround OpenGL issue on Linux
        if: runner.os == 'Linux'
        run: |
          # referenced from https://github.com/pyvista/pyvista/blob/main/.github/workflows/vtk-pre-test.yml#L53
          pip uninstall -y vtk
          pip install --extra-index-url https://wheels.vtk.org trame vtk-osmesa
      
      - name: Install fonts on Linux
        if: runner.os == 'Linux'
        run: |
          echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | sudo debconf-set-selections
          sudo apt-get install ttf-mscorefonts-installer fonts-liberation
          sudo rm -rf ~/.cache/matplotlib
      
      - name: Install OpenGL on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $PSDefaultParameterValues['*:ErrorAction']='Stop'
          powershell .github/install_opengl.ps1

      - name: Install MODFLOW executables
        uses: modflowpy/install-modflow-action@v1

      - name: Run tutorial and example notebooks
        working-directory: autotest
        run: pytest -v -n auto test_notebooks.py

      - name: Upload notebooks artifact for ReadtheDocs
        if: github.repository_owner == 'modflowpy' && github.event_name == 'push' && runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: notebooks-for-${{ github.sha }}
          path: .docs/Notebooks/*.ipynb

  # trigger rtd if previous job was successful
  rtd:
    name: Read the Docs trigger
    needs: rtd_build
    runs-on: ubuntu-latest

    if:
      github.repository_owner == 'modflowpy' && github.event_name == 'push'
    steps:
      - name: Trigger RTDs build on master and develop branches
        uses: dfm/rtds-action@v1
        with:
          webhook_url: ${{ secrets.RTDS_WEBHOOK_URL }}
          webhook_token: ${{ secrets.RTDS_WEBHOOK_TOKEN }}
          commit_ref: ${{ github.ref }}
