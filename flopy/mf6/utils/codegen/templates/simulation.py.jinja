# autogenerated file, do not modify
{% import 'macros.jinja' as macros %}
{% set title = (name|title).title() %}
{% set description = name|description %}

from os import PathLike, curdir
from typing import Union

from flopy.mf6.data.mfdatautil import ArrayTemplateGenerator, ListTemplateGenerator
from flopy.mf6.mfsimbase import MFSimulationBase

class MF{{ title }}(MFSimulationBase):
    """
    {{ description }}

    Parameters
    ----------
{{ macros.docstrings(dfn|variables)|indent(4, first=true) }}

    Methods
    -------
    load : (sim_name : str, version : string,
        exe_name : str or PathLike, sim_ws : str or PathLike, strict : bool,
        verbosity_level : int, load_only : list, verify_data : bool,
        write_headers : bool, lazy_io : bool, use_pandas : bool,
        ) : MFSimulation
        a class method that loads a simulation from files
    """

    def __init__(
        self,
        sim_name: str = "sim",
        version: str = "mf6",
        exe_name: Union[str, PathLike] = "mf6",
        sim_ws: Union[str, PathLike] = curdir,
        verbosity_level: int = 1,
        write_headers: bool = True,
        use_pandas: bool = True,
        lazy_io: bool = False,
{{ macros.init_params(dfn|variables, skip=name|skip_init)|indent(8, first=true) }}
    ):
        """
        {{ description }}

        Parameters
        ----------
        sim_name
            The name of the simulation
        version
            The simulation version
        exe_name
            The executable name
        sim_ws
            The simulation workspace
        verbosity_level
            The verbosity level
        write_headers
            Whether to write
        use_pandas
            Whether to use pandas
        lazy_io
            Whether to use lazy IO
{{ macros.docstrings(dfn|variables)|indent(8, first=true) }}
        """

        super().__init__(
            sim_name=sim_name,
            version=version,
            exe_name=exe_name,
            sim_ws=sim_ws,
            verbosity_level=verbosity_level,
            write_headers=write_headers,
            lazy_io=lazy_io,
            use_pandas=use_pandas
        )

        {% for statement in dfn|init(name) %}
        {{ statement }}
        {% endfor %}

    @classmethod
    def load(
        cls,
        sim_name="modflowsim",
        version="mf6",
        exe_name: Union[str, PathLike] = "mf6",
        sim_ws: Union[str, PathLike] = curdir,
        strict=True,
        verbosity_level=1,
        load_only=None,
        verify_data=False,
        write_headers=True,
        lazy_io=False,
        use_pandas=True,
    ):
        return MFSimulationBase.load(
            cls,
            sim_name,
            version,
            exe_name,
            sim_ws,
            strict,
            verbosity_level,
            load_only,
            verify_data,
            write_headers,
            lazy_io,
            use_pandas,
        )
