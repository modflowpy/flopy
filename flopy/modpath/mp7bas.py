"""
mpbas module.  Contains the ModpathBas class. Note that the user can access
the ModpathBas class as `flopy.modflow.ModpathBas`.

Additional information for this MODFLOW/MODPATH package can be found at the `Online
MODFLOW Guide
<http://water.usgs.gov/ogw/modflow/MODFLOW-2005-Guide/index.html?bas6.htm>`_.

"""
import numpy as np
from numpy import empty, array
from ..pakbase import Package
from ..utils import Util2d, Util3d

class Modpath7Bas(Package):
    """
    MODPATH Basic Package Class.

    Parameters
    ----------
    model : model object
        The model object (of type :class:`flopy.modpath.mp.Modpath`) to which
        this package will be added.
    hnoflo : float
        Head value assigned to inactive cells (default is -9999.).
    hdry : float
        Head value assigned to dry cells (default is -8888.).
    def_face_ct : int
        Number fo default iface codes to read (default is 0).
    bud_label : str or list of strs
        MODFLOW budget item to which a default iface is assigned.
    def_iface : int or list of ints
        Cell face (iface) on which to assign flows from MODFLOW budget file.
    laytyp : int or list of ints
        MODFLOW layer type (0 is convertible, 1 is confined).
    ibound : array of ints, optional
        The ibound array (the default is 1).
    prsity : array of ints, optional
        The porosity array (the default is 0.30).
    prsityCB : array of ints, optional
        The porosity array for confining beds (the default is 0.30).
    extension : str, optional
        File extension (default is 'mpbas').

    Attributes
    ----------
    heading : str
        Text string written to top of package input file.

    Methods
    -------

    See Also
    --------

    Notes
    -----

    Examples
    --------

    >>> import flopy
    >>> m = flopy.modpath.Modpath()
    >>> mpbas = flopy.modpath.ModpathBas(m)

    """
    def __init__(self, model, porosity=0.30,
                 extension='mpbas', defaultiface=None, unitnumber=None):
        """
        Package constructor.

        """
        if unitnumber is None:
            unitnumber = model.next_unit()

        Package.__init__(self, model, extension, 'MPBAS', unitnumber)

        shape = model.shape
        if len(shape) == 3:
            shape3d = shape
        elif len(shape) == 2:
            shape3d = (shape[0], 1, shape[1])
        else:
            shape3d = (1, 1, shape[0])

        self.heading = '# {} package for'.format(self.name[0]) + \
                       ' {}, '.format(model.version_types[model.version]) + \
                       'generated by Flopy.'


        if model.flowmodel.version == 'mf6':
            model.laytyp = Util2d(self.parent, (shape[0],), np.int32,
                                  model.laytyp, name='bas - laytype',
                                  locat=self.unit_number[0])
        else:
            model.laytyp = Util2d(self.parent, (shape[0],), np.int32,
                                 model.laytyp, name='bas - laytype',
                                 locat=self.unit_number[0])
        if model.flowmodel.version != 'mf6':
            model.ibound = Util3d(model, shape3d, np.int32, model.ibound,
                                  name='ibound', locat=self.unit_number[0])
        
        self.porosity = Util3d(model, shape3d, np.float32, porosity,
                               name='porosity', locat=self.unit_number[0])

        # validate and set defaultiface
        if defaultiface is None:
            defaultifacecount = 0
        else:
            if not isinstance(defaultiface, dict):
                msg = 'defaultiface must be a dictionary with package ' + \
                      'name keys and values between 0 and 6'
                raise ValueError(msg)
            defaultifacecount = len(defaultiface.keys())
            for key, value in defaultiface.items():
                # check iface value
                if value < 0 or value > 6:
                    msg = 'defaultiface for package {}'.format(key) + \
                          'must be between 0 and 1 ' + \
                          '({} specified)'.format(value)
                    raise ValueError(msg)

        self.defaultifacecount = defaultifacecount
        self.defaultiface = defaultiface

        self.parent.add_package(self)

    def write_file(self):
        """
        Write the package file

        Returns
        -------
        None

        """
        # Open file for writing
        f = open(self.fn_path, 'w')
        f.write('# {}\n'.format(self.heading))
        if self.parent.flowmodel.version != 'mf6':
            f.write('{:g} {:g}\n'.format(self.parent.hnoflo,
                                         self.parent.hdry))

        # default IFACE
        f.write('{:<20d}{}\n'.format(self.defaultifacecount,
                                     '# DEFAULTIFACECOUNT'))
        if self.defaultifacecount > 0:
            for key, value in self.defaultiface.items():
                f.write('{:20s}{}\n'.format(key, '# PACKAGE LABEL'))
                f.write('{:<20d}{}\n'.format(value, '# DEFAULT IFACE VALUE'))

        # laytyp
        f.write(self.parent.laytyp.string)

        # ibound
        if self.parent.flow_version != 'mf6':
            f.write(self.parent.ibound.get_file_entry())

        # porosity
        f.write(self.porosity.get_file_entry())

        f.close()
