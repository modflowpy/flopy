"""
mpsim module.  Contains the ModpathSim class. Note that the user can access
the ModpathSim class as `flopy.modpath.ModpathSim`.

Additional information for this MODFLOW/MODPATH package can be found at the
`Online MODFLOW Guide
<http://water.usgs.gov/ogw/modflow/MODFLOW-2005-Guide/index.html?dis.htm>`_.

"""
import numpy as np
from ..pakbase import Package
from ..utils import Util2d, Util3d, check
from enum import Enum

class simType(Enum):
    """
    Enumeration of different simulation types
    """
    endpoint = 1
    pathline = 2
    timeseries = 3
    combined = 4

class trackDir(Enum):
    """
    Enumeration of different tracking directions
    """
    forward = 1
    backward = 2

class weakOpt(Enum):
    """
    Enumeration of different weak sink and source options
    """
    pass_through = 1
    stop_at = 2

class budgetOpt(Enum):
    """
    Enumeration of different budget output options
    """
    no = 0
    summary = 1
    record_summary = 2


class Modpath7Sim(Package):
    """
    MODPATH Simulation File Package Class.

    Parameters
    ----------
    model : model object
        The model object (of type :class:`flopy.modpath.mp.Modpath`) to which
        this package will be added.
    extension : string
        Filename extension (default is 'mpsim')


    Attributes
    ----------
    heading : str
        Text string written to top of package input file.

    Methods
    -------

    See Also
    --------

    Notes
    -----

    Examples
    --------

    >>> import flopy
    >>> m = flopy.modpath.Modpath()
    >>> dis = flopy.modpath.ModpathSim(m)

    """

    def __init__(self, model, mp_name_file=None, mp_list_file=None,
                 endpoint_file=None, pathline_file=None,
                 time_series_file=None, trace_file=None,
                 SimulationType='pathline', TrackingDirection='forward',
                 WeakSinkOption='stop_at', WeakSourceOption='stop_at',
                 BudgetOutputOption='no',
                 TraceParticleGroup=None, TraceParticleId=None,
                 BudgetCellNumbers=None,
                 extension='mpsim', unitnumber=None):

        if unitnumber is None:
            unitnumber = model.next_unit()


        # Call ancestor's init to set self.parent, extension, name and unit number
        Package.__init__(self, model, extension, 'MPSIM', unitnumber)

        self.heading = '# {} package for'.format(self.name[0]) + \
                       ' {}, '.format(model.version_types[model.version]) + \
                       'generated by Flopy.'

        # set file names
        if mp_name_file is None:
            mp_name_file = '{}.{}'.format(model.name, 'mpnam')
        self.mp_name_file = mp_name_file
        if mp_list_file is None:
            mp_list_file = '{}.{}'.format(model.name, 'mplst')
        self.mp_list_file = mp_list_file
        if endpoint_file is None:
            endpoint_file = '{}.{}'.format(model.name, 'mpend')
        self.endpoint_file = endpoint_file
        if pathline_file is None:
            pathline_file = '{}.{}'.format(model.name, 'mppth')
        self.pathline_file = pathline_file
        if time_series_file is None:
            time_series_file = '{}.{}'.format(model.name, 'timseries')
        self.time_series_file = time_series_file
        if trace_file is None:
            trace_file = '{}.{}'.format(model.name, 'trace')
        self.trace_file = trace_file

        try:
            self.SimulationType = simType[SimulationType.lower()].value
        except:
            self._enum_error('SimulationType', SimulationType, simType)
        try:
            self.TrackingDirection = trackDir[TrackingDirection.lower()].value
        except:
            self._enum_error('TrackingDirection', TrackingDirection,
                             trackDir)
        try:
            self.WeakSinkOption = weakOpt[WeakSinkOption.lower()].value
        except:
            self._enum_error('WeakSinkOption', WeakSinkOption,
                             weakOpt)
        try:
            self.WeakSourceOption = weakOpt[WeakSourceOption.lower()].value
        except:
            self._enum_error('WeakSourceOption', WeakSourceOption,
                             weakOpt)
        try:
            self.BudgetOutputOption = \
                budgetOpt[BudgetOutputOption.lower()].value
        except:
            self._enum_error('BudgetOutputOption', BudgetOutputOption,
                             budgetOpt)
        # TraceMode
        if TraceParticleGroup is None or TraceParticleId is None:
            TraceMode = 0
        else:
            TraceMode = 1
        self.TraceMode = TraceMode
        self.TraceParticleGroup = TraceParticleGroup
        self.TraceParticleId = TraceParticleId

        if BudgetCellNumbers is None:
            BudgetCellCount = 0
        else:
            if isinstance(BudgetCellNumbers, int):
                BudgetCellNumbers = [BudgetCellNumbers]
            BudgetCellNumbers = np.array(BudgetCellNumbers, dtype=np.int32)
            BudgetCellCount = BudgetCellNumbers.shape[0]
            self.BudgetCellNumbers = Util2d(self.parent, (BudgetCellCount,),
                                       np.int32, BudgetCellNumbers,
                                       name='BUDGETCELLNUMBERS',
                                       locat=self.unit_number[0])
        self.BudgetCellCount = BudgetCellCount

        self.parent.add_package(self)

    def _enum_error(self, v, s, e):
        msg = 'Invalid {} ({})'.format(v, s) + \
              '. Valid types are '
        for i, c in enumerate(e):
            if i > 0:
                msg += ', '
            msg += '"{}"'.format(c.name)
        raise ValueError(msg)

    def write_file(self, check=False):
        """
        Write the package file

        Returns
        -------
        None

        """

        f = open(self.fn_path, 'w')
        # item 0
        f.write('{}\n'.format(self.heading))
        # item 1
        f.write('{}\n'.format(self.mp_name_file))
        # item 2
        f.write('{}\n'.format(self.mp_list_file))
        # item 3
        f.write('{} {} {} {} {} {}\n'.format(self.SimulationType,
                                             self.TrackingDirection,
                                             self.WeakSinkOption,
                                             self.WeakSourceOption,
                                             self.BudgetOutputOption,
                                             self.TraceMode))
        # item 4
        f.write('{}\n'.format(self.endpoint_file))
        # item 5
        if self.SimulationType == 2 or self.SimulationType == 4:
            f.write('{}\n'.format(self.pathline_file))
        # item 6
        if self.SimulationType == 3 or self.SimulationType == 4:
            f.write('{}\n'.format(self.time_series_file))
        # item 7 and 8
        if self.TraceMode == 1:
            f.write('{}\n'.format(self.trace_file))
            f.write('{} {}\n'.format(self.TraceParticleGroup,
                                     self.TraceParticleId))
        # item 9
        f.write('{}\n'.format(self.BudgetCellCount))
        # item 10
        if self.BudgetCellCount > 0:
            f.write(self.BudgetCellNumbers.string)



        f.close()
